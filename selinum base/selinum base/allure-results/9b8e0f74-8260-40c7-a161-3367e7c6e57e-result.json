{"name": "test_cart_price_details", "status": "failed", "statusDetails": {"message": "Failed: Test failed due to exception", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0976ba5778f39aa6850e41c392f60d8e\")>\n\n    @pytest.mark.cart\n    def test_cart_price_details(driver):\n        try:\n            # Login to the application\n>           login_to_flask_shop(driver, BASE_URL, USERNAME, PASSWORD)\n\ntest_cart_navigation.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlogin_test.py:37: in login_to_flask_shop\n    wait.until(EC.url_changes(f\"{base_url}/login\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0976ba5778f39aa6850e41c392f60d8e\")>\nmethod = <function url_changes.<locals>._predicate at 0x000001F3449AF040>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0976ba5778f39aa6850e41c392f60d8e\")>\n\n    @pytest.mark.cart\n    def test_cart_price_details(driver):\n        try:\n            # Login to the application\n            login_to_flask_shop(driver, BASE_URL, USERNAME, PASSWORD)\n    \n            # Verify that we're logged in and redirected (check URL after login)\n            assert BASE_URL + \"/login\" not in driver.current_url, \"Login page not redirected\"\n            print(f\"Current URL after login: {driver.current_url}\")\n    \n            # Navigate to the cart\n            navigate_to_cart(driver, BASE_URL)\n    \n            # Get cart price details\n            price_ids, grand_total = get_cart_price_details(driver)\n    \n            # Verify that price details are retrieved\n            assert price_ids is not None, \"Failed to retrieve price IDs\"\n            assert grand_total is not None, \"Failed to retrieve grand total\"\n    \n            # You can perform further assertions or checks based on the retrieved details\n            # For example, check that the grand total is a valid number (if applicable)\n            assert grand_total.startswith(\"$\"), \"Grand total format is incorrect\"\n    \n        except Exception as e:\n            print(f\"Test failed with error: {e}\")\n            take_screenshot(driver, \"test_cart_price_details_failed\")  # Capture screenshot on failure\n>           pytest.fail(\"Test failed due to exception\")\nE           Failed: Test failed due to exception\n\ntest_cart_navigation.py:92: Failed"}, "attachments": [{"name": "stdout", "source": "fe4bf6c3-9621-4ea7-8d0d-14f5b4145f5f-attachment.txt", "type": "text/plain"}], "start": 1745162931682, "stop": 1745162953222, "uuid": "aff6ae9e-6e0d-4bfc-b6b4-93a8e215775a", "historyId": "23e845c189f2cb9853425f6604dd826d", "testCaseId": "23e845c189f2cb9853425f6604dd826d", "fullName": "test_cart_navigation#test_cart_price_details", "labels": [{"name": "tag", "value": "cart"}, {"name": "suite", "value": "test_cart_navigation"}, {"name": "host", "value": "DESKTOP-H49NC95"}, {"name": "thread", "value": "14840-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cart_navigation"}]}