{"name": "test_dropdown_multiple_clicks", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ade0bd90f043979c327ff157a23371e9\")>\n\n    @pytest.mark.test_dropdown_multiple_clicks\n    def test_dropdown_multiple_clicks(driver):\n>       login_to_flask_shop(driver, base_url, \"abc@gmail.com\", \"abcd@123\")\n\ntest_user.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlogin_test.py:37: in login_to_flask_shop\n    wait.until(EC.url_changes(f\"{base_url}/login\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ade0bd90f043979c327ff157a23371e9\")>\nmethod = <function url_changes.<locals>._predicate at 0x000001F3449E6040>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "start": 1745163083309, "stop": 1745163104599, "uuid": "60e8c4e9-f942-4849-98e5-112f24196b2a", "historyId": "669752fb8ad11653329ca23c7d94c276", "testCaseId": "669752fb8ad11653329ca23c7d94c276", "fullName": "test_user#test_dropdown_multiple_clicks", "labels": [{"name": "tag", "value": "test_dropdown_multiple_clicks"}, {"name": "suite", "value": "test_user"}, {"name": "host", "value": "DESKTOP-H49NC95"}, {"name": "thread", "value": "14840-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_user"}]}