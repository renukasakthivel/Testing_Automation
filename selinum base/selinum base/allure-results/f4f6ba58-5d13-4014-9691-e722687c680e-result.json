{"name": "test_login_with_special_characters[abc!@#gmail.com-abcd@123!$]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "username = 'abc!@#gmail.com', password = 'abcd@123!$'\n\n    @pytest.mark.parametrize(\"username, password\", [(\"abc!@#gmail.com\", \"abcd@123!$\")])\n    def test_login_with_special_characters(username, password):\n        driver_path = \"C:/Users/RAJAVEL/Desktop/virtusa4/selenium_tests/chromedriver-win64/chromedriver.exe\"\n        service = Service(driver_path)\n        driver = webdriver.Chrome(service=service)\n    \n        try:\n            login_to_flask_shop(driver, \"http://127.0.0.1:5000\", username, password)\n            assert driver.current_url != \"http://127.0.0.1:5000/login\", \"Login failed with special characters in credentials.\"\n        except Exception as e:\n            take_screenshot(driver, \"test_login_with_special_characters\")\n>           raise e\n\nlogin_test.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlogin_test.py:111: in test_login_with_special_characters\n    login_to_flask_shop(driver, \"http://127.0.0.1:5000\", username, password)\nlogin_test.py:37: in login_to_flask_shop\n    wait.until(EC.url_changes(f\"{base_url}/login\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9bf854c7ee345fdab933b398905199d9\")>\nmethod = <function url_changes.<locals>._predicate at 0x0000020C48EBA280>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "attachments": [{"name": "stdout", "source": "4126df93-3a4b-4856-b18b-8af32aa42180-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "username", "value": "'abc!@#gmail.com'"}, {"name": "password", "value": "'abcd@123!$'"}], "start": 1745064708843, "stop": 1745064735273, "uuid": "9189e41b-5b07-4bb7-a876-300d0e5cfc58", "historyId": "a302aa9e9d7c4a3244dbf51a00ea07cf", "testCaseId": "aab5f4f5960e0abc7caaea449a2b8dec", "fullName": "login_test#test_login_with_special_characters", "labels": [{"name": "suite", "value": "login_test"}, {"name": "host", "value": "MSI"}, {"name": "thread", "value": "6708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "login_test"}]}